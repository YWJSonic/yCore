// Code generated by protoc-gen-go. DO NOT EDIT.
// source: streamproto.proto

package streamproto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Operation int32

const (
	Operation_Unknow   Operation = 0
	Operation_Error    Operation = 1
	Operation_Request  Operation = 2
	Operation_Response Operation = 3
	Operation_Notice   Operation = 4
)

var Operation_name = map[int32]string{
	0: "Unknow",
	1: "Error",
	2: "Request",
	3: "Response",
	4: "Notice",
}

var Operation_value = map[string]int32{
	"Unknow":   0,
	"Error":    1,
	"Request":  2,
	"Response": 3,
	"Notice":   4,
}

func (x Operation) String() string {
	return proto.EnumName(Operation_name, int32(x))
}

func (Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_52d939ee4c4d4d51, []int{0}
}

type Message struct {
	OperationCode        Operation `protobuf:"varint,1,opt,name=operation_code,json=operationCode,proto3,enum=Operation" json:"operation_code,omitempty"`
	Payload              []byte    `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_52d939ee4c4d4d51, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetOperationCode() Operation {
	if m != nil {
		return m.OperationCode
	}
	return Operation_Unknow
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterEnum("Operation", Operation_name, Operation_value)
	proto.RegisterType((*Message)(nil), "Message")
}

func init() {
	proto.RegisterFile("streamproto.proto", fileDescriptor_52d939ee4c4d4d51)
}

var fileDescriptor_52d939ee4c4d4d51 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x8f, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x86, 0xb3, 0x51, 0xf3, 0x31, 0xc6, 0xb0, 0xee, 0x29, 0x78, 0x0a, 0x01, 0x21, 0x78, 0x88,
	0x1a, 0x7f, 0x82, 0x78, 0xf0, 0xa0, 0x81, 0x15, 0xbd, 0xca, 0x9a, 0x0c, 0x12, 0xda, 0xee, 0x6c,
	0x77, 0xb7, 0x94, 0xfe, 0xfb, 0xd2, 0xd0, 0xe4, 0x32, 0xbc, 0x33, 0xcc, 0x03, 0xcf, 0x0b, 0xb7,
	0xce, 0x5b, 0x54, 0x1b, 0x63, 0xc9, 0x53, 0x33, 0xcd, 0xea, 0x07, 0xe2, 0x0f, 0x74, 0x4e, 0xfd,
	0xa3, 0x78, 0x86, 0x9c, 0x0c, 0x5a, 0xe5, 0x47, 0xd2, 0xbf, 0x3d, 0x0d, 0x58, 0xb0, 0x92, 0xd5,
	0x79, 0x0b, 0x4d, 0x37, 0x9f, 0xe5, 0xcd, 0xf2, 0xf1, 0x4a, 0x03, 0x8a, 0x02, 0x62, 0xa3, 0x0e,
	0x6b, 0x52, 0x43, 0x11, 0x96, 0xac, 0xce, 0xe4, 0xbc, 0x3e, 0xbc, 0x43, 0xba, 0x50, 0x02, 0x20,
	0xfa, 0xd6, 0x2b, 0x4d, 0x7b, 0x1e, 0x88, 0x14, 0xae, 0xde, 0xac, 0x25, 0xcb, 0x99, 0xb8, 0x86,
	0x58, 0xe2, 0x76, 0x87, 0xce, 0xf3, 0x50, 0x64, 0x90, 0x48, 0x74, 0x86, 0xb4, 0x43, 0x7e, 0x71,
	0x22, 0x3e, 0xc9, 0x8f, 0x3d, 0xf2, 0xcb, 0xf6, 0x11, 0xa2, 0xaf, 0xc9, 0x5b, 0xdc, 0x43, 0xda,
	0xe9, 0x59, 0x37, 0x69, 0xce, 0xe9, 0x6e, 0x49, 0x55, 0x50, 0xb3, 0x27, 0xf6, 0x17, 0x4d, 0xd5,
	0x5e, 0x8e, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x94, 0x2c, 0x96, 0xef, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamClient interface {
	OnMessage(ctx context.Context, opts ...grpc.CallOption) (Stream_OnMessageClient, error)
}

type streamClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamClient(cc grpc.ClientConnInterface) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) OnMessage(ctx context.Context, opts ...grpc.CallOption) (Stream_OnMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[0], "/Stream/OnMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamOnMessageClient{stream}
	return x, nil
}

type Stream_OnMessageClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type streamOnMessageClient struct {
	grpc.ClientStream
}

func (x *streamOnMessageClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamOnMessageClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServer is the server API for Stream service.
type StreamServer interface {
	OnMessage(Stream_OnMessageServer) error
}

// UnimplementedStreamServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServer struct {
}

func (*UnimplementedStreamServer) OnMessage(srv Stream_OnMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method OnMessage not implemented")
}

func RegisterStreamServer(s *grpc.Server, srv StreamServer) {
	s.RegisterService(&_Stream_serviceDesc, srv)
}

func _Stream_OnMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).OnMessage(&streamOnMessageServer{stream})
}

type Stream_OnMessageServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type streamOnMessageServer struct {
	grpc.ServerStream
}

func (x *streamOnMessageServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamOnMessageServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Stream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Stream",
	HandlerType: (*StreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OnMessage",
			Handler:       _Stream_OnMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "streamproto.proto",
}
